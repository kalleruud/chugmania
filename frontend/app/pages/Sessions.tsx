import {
  Ban,
  CalendarClock,
  CalendarPlus,
  Check,
  Edit,
  HelpCircle,
  LogIn,
  MapPin,
  Trash2,
  X,
} from 'lucide-react'
import { useEffect, useMemo, useState, type FormEvent } from 'react'
import { useNavigate } from 'react-router-dom'
import type {
  BackendResponse,
  ErrorResponse,
  GetSessionsResponse,
} from '../../../common/models/responses'
import type { SessionWithSignups } from '../../../common/models/session'
import {
  WS_CANCEL_SESSION,
  WS_CREATE_SESSION,
  WS_DELETE_SESSION,
  WS_GET_SESSIONS,
  WS_JOIN_SESSION,
  WS_LEAVE_SESSION,
  WS_SESSIONS_UPDATED,
  WS_UPDATE_SESSION,
} from '../../../common/utils/constants'
import { useAuth } from '../../contexts/AuthContext'
import { useConnection } from '../../contexts/ConnectionContext'
import { Button } from '../components/Button'
import LoadingView from '../components/LoadingView'
import Tag from '../components/Tag'

const dateFormatter = new Intl.DateTimeFormat(undefined, {
  dateStyle: 'full',
  timeStyle: 'short',
})

function openCalendarLink(path: string, mode: 'subscribe' | 'download') {
  const httpUrl = `${globalThis.location.origin}${path}`

  if (mode === 'download') {
    globalThis.location.href = httpUrl
    return
  }

  globalThis.location.href = httpUrl.replace(/^https?:\/\//, 'webcal://')
}

function handleSubscribeToCalendar() {
  openCalendarLink('/api/sessions/calendar.ics', 'subscribe')
}

function handleAddToCalendar(session: SessionWithSignups) {
  openCalendarLink(`/api/sessions/${session.id}/calendar.ics`, 'download')
}

function hasSessionPassed(session: SessionWithSignups) {
  return new Date(session.date).getTime() < Date.now()
}

function getSessionDescription(session: SessionWithSignups) {
  const custom = session.description?.trim()
  if (custom) return custom

  if (session.location?.trim()) {
    return `${session.name} @ ${session.location}. Automatically generated by Chugmania.`
  }
  return `${session.name}. Automatically generated by Chugmania.`
}

export default function Sessions() {
  const { socket } = useConnection()
  const { user, isLoggedIn } = useAuth()
  const navigate = useNavigate()
  const [sessions, setSessions] = useState<SessionWithSignups[]>([])
  const [loading, setLoading] = useState(true)
  const [creating, setCreating] = useState(false)
  const [activeSessionId, setActiveSessionId] = useState<string | null>(null)
  const [editingSessionId, setEditingSessionId] = useState<string | null>(null)
  const [form, setForm] = useState({
    name: '',
    date: '',
    location: '',
    description: '',
  })
  const [editForm, setEditForm] = useState({
    name: '',
    date: '',
    location: '',
    description: '',
  })
  const [updating, setUpdating] = useState(false)
  const [deleting, setDeleting] = useState(false)
  const [canceling, setCanceling] = useState(false)

  const canManageSessions = user?.role === 'admin' || user?.role === 'moderator'

  useEffect(() => {
    socket.emit(
      WS_GET_SESSIONS,
      undefined,
      (response: GetSessionsResponse | ErrorResponse) => {
        if (!response.success) {
          console.error(response.message)
          globalThis.alert(response.message)
          setLoading(false)
          return
        }

        setSessions(response.sessions)
        setLoading(false)
      }
    )
  }, [])

  useEffect(() => {
    const handleSessionsUpdated = (response: GetSessionsResponse) => {
      if (!response?.success) return
      setSessions(response.sessions)
    }

    socket.on(WS_SESSIONS_UPDATED, handleSessionsUpdated)
    return () => {
      socket.off(WS_SESSIONS_UPDATED, handleSessionsUpdated)
    }
  }, [socket])

  const upcomingSessions = useMemo(
    () => sessions.filter(session => !hasSessionPassed(session)),
    [sessions]
  )
  const pastSessions = useMemo(
    () => sessions.filter(session => hasSessionPassed(session)),
    [sessions]
  )

  function handleCreateSession(e: FormEvent<HTMLFormElement>) {
    e.preventDefault()
    if (!form.name.trim() || !form.date) return

    setCreating(true)
    socket.emit(
      WS_CREATE_SESSION,
      {
        name: form.name.trim(),
        date: new Date(form.date).toISOString(),
        location: form.location.trim() ? form.location.trim() : undefined,
        description: form.description.trim()
          ? form.description.trim()
          : undefined,
      },
      (response: BackendResponse) => {
        setCreating(false)
        if (!response.success) {
          console.error(response.message)
          return globalThis.alert(response.message)
        }

        setForm({ name: '', date: '', location: '', description: '' })
      }
    )
  }

  function handleJoin(
    sessionId: string,
    rsvpResponse: 'yes' | 'no' | 'maybe' = 'yes',
    currentResponse?: 'yes' | 'no' | 'maybe'
  ) {
    if (!isLoggedIn)
      return globalThis.alert('Please sign in to join a session.')

    if (currentResponse === rsvpResponse) {
      return handleLeave(sessionId)
    }

    setActiveSessionId(sessionId)
    socket.emit(
      WS_JOIN_SESSION,
      { session: sessionId, response: rsvpResponse },
      (response: BackendResponse) => {
        setActiveSessionId(null)
        if (!response.success) {
          console.error(response.message)
          return globalThis.alert(response.message)
        }
      }
    )
  }

  function handleLeave(sessionId: string) {
    if (!isLoggedIn) return
    setActiveSessionId(sessionId)
    socket.emit(
      WS_LEAVE_SESSION,
      { session: sessionId },
      (response: BackendResponse) => {
        setActiveSessionId(null)
        if (!response.success) {
          console.error(response.message)
          return globalThis.alert(response.message)
        }
      }
    )
  }

  function handleEditSession(session: SessionWithSignups) {
    const date = new Date(session.date)
    const isoDate = date.toISOString().slice(0, 16)
    setEditForm({
      name: session.name,
      date: isoDate,
      location: session.location || '',
      description: session.description || '',
    })
    setEditingSessionId(session.id)
  }

  function handleUpdateSession() {
    if (!editForm.name.trim() || !editForm.date || !editingSessionId) return

    setUpdating(true)
    socket.emit(
      WS_UPDATE_SESSION,
      {
        id: editingSessionId,
        name: editForm.name.trim(),
        date: new Date(editForm.date).toISOString(),
        location: editForm.location.trim()
          ? editForm.location.trim()
          : undefined,
        description: editForm.description.trim()
          ? editForm.description.trim()
          : undefined,
      },
      (response: BackendResponse) => {
        setUpdating(false)
        if (!response.success) {
          console.error(response.message)
          return globalThis.alert(response.message)
        }
        setEditingSessionId(null)
        setEditForm({ name: '', date: '', location: '', description: '' })
      }
    )
  }

  function handleDeleteSession(sessionId: string) {
    if (!globalThis.confirm('Are you sure you want to delete this session?')) {
      return
    }

    setDeleting(true)
    socket.emit(
      WS_DELETE_SESSION,
      { id: sessionId },
      (response: BackendResponse) => {
        setDeleting(false)
        if (!response.success) {
          console.error(response.message)
          return globalThis.alert(response.message)
        }
      }
    )
  }

  function handleCancelSession(sessionId: string) {
    if (
      !globalThis.confirm(
        'Are you sure you want to cancel this session? Participants will be notified.'
      )
    ) {
      return
    }

    setCanceling(true)
    socket.emit(
      WS_CANCEL_SESSION,
      { id: sessionId },
      (response: BackendResponse) => {
        setCanceling(false)
        if (!response.success) {
          console.error(response.message)
          return globalThis.alert(response.message)
        }
      }
    )
  }

  function renderSession(session: SessionWithSignups) {
    const date = new Date(session.date)
    const isPast = hasSessionPassed(session)
    const isSignedUp =
      !!user && session.signups.some(s => s.user.id === user.id)
    const userResponse =
      user && session.signups.find(s => s.user.id === user.id)?.response
    const description = getSessionDescription(session)
    const rsvpCounts = {
      yes: session.signups.filter(s => s.response === 'yes').length,
      no: session.signups.filter(s => s.response === 'no').length,
      maybe: session.signups.filter(s => s.response === 'maybe').length,
    }

    const statusClasses = {
      confirmed: 'border-stroke bg-white/5 backdrop-blur-sm',
      tentative:
        'border-dashed border-yellow-500/30 bg-yellow-500/5 opacity-75 backdrop-blur-sm',
      cancelled: 'border-stroke bg-red-500/5 opacity-50 backdrop-blur-sm',
    }

    return (
      <div
        key={session.id}
        className={`border-stroke flex flex-col overflow-hidden rounded-2xl border ${statusClasses[session.status] || statusClasses.confirmed}`}>
        <div className='border-b border-white/10 bg-white/10 px-6 py-4'>
          <div className='flex items-start justify-between gap-3'>
            <div className='flex-1'>
              <h2 className='text-lg font-bold leading-tight'>
                {session.name}
              </h2>
              {session.location && (
                <div className='text-label-muted mt-1 flex items-center gap-1 text-xs'>
                  <MapPin size={14} />
                  {session.location}
                </div>
              )}
            </div>
            <div className='flex items-center gap-2'>
              {canManageSessions && (
                <>
                  <Button
                    type='button'
                    variant='secondary'
                    size='sm'
                    disabled={activeSessionId === session.id}
                    onClick={() => handleEditSession(session)}
                    aria-label='Edit session'>
                    <Edit size={16} />
                  </Button>
                  {session.status !== 'cancelled' && (
                    <Button
                      type='button'
                      variant='secondary'
                      size='sm'
                      disabled={activeSessionId === session.id || canceling}
                      onClick={() => handleCancelSession(session.id)}
                      aria-label='Cancel session'>
                      <Ban size={16} />
                    </Button>
                  )}
                  <Button
                    type='button'
                    variant='secondary'
                    size='sm'
                    disabled={activeSessionId === session.id || deleting}
                    onClick={() => handleDeleteSession(session.id)}
                    aria-label='Delete session'>
                    <Trash2 size={16} />
                  </Button>
                </>
              )}
              <Tag
                variation='colored'
                selected={session.status === 'confirmed' && !isPast}>
                {session.status === 'cancelled'
                  ? 'Cancelled'
                  : session.status === 'tentative'
                    ? 'Tentative'
                    : isPast
                      ? 'Completed'
                      : 'Upcoming'}
              </Tag>
            </div>
          </div>
        </div>

        <div className='flex-1 space-y-3 px-6 py-4'>
          <div className='text-label-muted flex items-center gap-2 text-sm'>
            <CalendarClock size={16} />
            {dateFormatter.format(date)}
          </div>

          {session.description && (
            <p className='text-label-muted text-xs leading-relaxed'>
              {description}
            </p>
          )}

          <div className='grid grid-cols-3 gap-3 rounded-xl bg-white/5 p-3'>
            <div className='flex flex-col items-center gap-1'>
              <div className='text-label-muted flex items-center gap-1 text-xs'>
                <Check size={14} className='text-green-500/70' />
              </div>
              <div className='text-lg font-bold'>{rsvpCounts.yes}</div>
            </div>
            <div className='flex flex-col items-center gap-1'>
              <div className='text-label-muted flex items-center gap-1 text-xs'>
                <HelpCircle size={14} className='text-yellow-500/70' />
              </div>
              <div className='text-lg font-bold'>{rsvpCounts.maybe}</div>
            </div>
            <div className='flex flex-col items-center gap-1'>
              <div className='text-label-muted flex items-center gap-1 text-xs'>
                <X size={14} className='text-red-500/70' />
              </div>
              <div className='text-lg font-bold'>{rsvpCounts.no}</div>
            </div>
          </div>
        </div>

        <div className='space-y-3 border-t border-white/10 px-6 py-4'>
          {!isPast && (
            <div className='flex gap-2'>
              {isLoggedIn && isSignedUp && (
                <>
                  <Button
                    type='button'
                    size='sm'
                    state={userResponse === 'yes' ? 'selected' : 'unselected'}
                    disabled={activeSessionId === session.id}
                    className='flex-1'
                    onClick={() => handleJoin(session.id, 'yes', userResponse)}>
                    <Check size={16} />
                    Yes
                  </Button>
                  <Button
                    type='button'
                    size='sm'
                    state={userResponse === 'maybe' ? 'selected' : 'unselected'}
                    disabled={activeSessionId === session.id}
                    className='flex-1'
                    onClick={() =>
                      handleJoin(session.id, 'maybe', userResponse)
                    }>
                    <HelpCircle size={16} />
                    Maybe
                  </Button>
                  <Button
                    type='button'
                    size='sm'
                    state={userResponse === 'no' ? 'selected' : 'unselected'}
                    disabled={activeSessionId === session.id}
                    className='flex-1'
                    onClick={() => handleJoin(session.id, 'no', userResponse)}>
                    <X size={16} />
                    No
                  </Button>
                </>
              )}

              {isLoggedIn && !isSignedUp && (
                <>
                  <Button
                    type='button'
                    size='sm'
                    variant='secondary'
                    disabled={activeSessionId === session.id}
                    className='flex-1'
                    onClick={() => handleJoin(session.id, 'yes')}>
                    <Check size={16} />
                    Yes
                  </Button>
                  <Button
                    type='button'
                    size='sm'
                    variant='secondary'
                    disabled={activeSessionId === session.id}
                    className='flex-1'
                    onClick={() => handleJoin(session.id, 'maybe')}>
                    <HelpCircle size={16} />
                    Maybe
                  </Button>
                  <Button
                    type='button'
                    size='sm'
                    variant='secondary'
                    disabled={activeSessionId === session.id}
                    className='flex-1'
                    onClick={() => handleJoin(session.id, 'no')}>
                    <X size={16} />
                    No
                  </Button>
                </>
              )}

              {!isLoggedIn && (
                <Button
                  type='button'
                  size='sm'
                  className='flex-1'
                  onClick={() => navigate(`/login?redirect=/sessions`)}>
                  <LogIn size={16} />
                  Sign in to join
                </Button>
              )}

              {isLoggedIn && (
                <Button
                  type='button'
                  variant='secondary'
                  size='sm'
                  disabled={activeSessionId === session.id}
                  onClick={() => handleAddToCalendar(session)}>
                  <CalendarPlus size={16} />
                </Button>
              )}
            </div>
          )}
        </div>
      </div>
    )
  }

  if (loading) return <LoadingView />

  return (
    <div className='px-safe-or-4 pt-safe-or-8 flex-1 space-y-10 pb-24'>
      <header className='flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between'>
        <div className='space-y-2 sm:max-w-2xl'>
          <h1 className='text-3xl font-semibold'>Sessions</h1>
          <p className='text-label-muted text-sm'>
            Join upcoming Trackmania gatherings and keep track of who is
            attending. Moderators and admins can create new sessions, and
            everyone can register their participation before the event kicks
            off.
          </p>
        </div>
        <Button
          type='button'
          variant='secondary'
          className='w-full sm:w-auto'
          onClick={handleSubscribeToCalendar}>
          <CalendarPlus size={16} />
          Subscribe via calendar
        </Button>
      </header>

      {canManageSessions && (
        <section className='border-stroke rounded-2xl border bg-white/5 p-6 backdrop-blur-sm'>
          <h2 className='text-lg font-semibold'>Create a session</h2>
          <form
            className='mt-4 grid gap-4 sm:grid-cols-2'
            onSubmit={handleCreateSession}>
            <label className='flex flex-col gap-2 text-sm'>
              <span className='text-label-muted'>Session name</span>
              <input
                required
                type='text'
                value={form.name}
                onChange={e =>
                  setForm(prev => ({ ...prev, name: e.target.value }))
                }
                placeholder='Trackmania Turbo LAN'
                className='focus:ring-accent/60 focus:border-accent rounded-lg border border-white/10 bg-white/5 px-4 py-2 outline-none transition focus:ring-2'
              />
            </label>
            <label className='flex flex-col gap-2 text-sm'>
              <span className='text-label-muted'>Date & time</span>
              <input
                required
                type='datetime-local'
                value={form.date}
                onChange={e =>
                  setForm(prev => ({ ...prev, date: e.target.value }))
                }
                className='focus:ring-accent/60 focus:border-accent rounded-lg border border-white/10 bg-white/5 px-4 py-2 outline-none transition focus:ring-2'
              />
            </label>
            <label className='flex flex-col gap-2 text-sm sm:col-span-2'>
              <span className='text-label-muted'>Location (optional)</span>
              <input
                type='text'
                value={form.location}
                onChange={e =>
                  setForm(prev => ({ ...prev, location: e.target.value }))
                }
                placeholder='Oslo, Norway'
                className='focus:ring-accent/60 focus:border-accent rounded-lg border border-white/10 bg-white/5 px-4 py-2 outline-none transition focus:ring-2'
              />
            </label>
            <label className='flex flex-col gap-2 text-sm sm:col-span-2'>
              <span className='text-label-muted'>Description (optional)</span>
              <textarea
                value={form.description}
                onChange={e =>
                  setForm(prev => ({ ...prev, description: e.target.value }))
                }
                placeholder='Share a short agenda or helpful notes'
                rows={3}
                className='focus:ring-accent/60 focus:border-accent rounded-lg border border-white/10 bg-white/5 px-4 py-2 outline-none transition focus:ring-2'
              />
            </label>
            <div className='sm:col-span-2'>
              <Button type='submit' disabled={creating}>
                {creating ? 'Creating…' : 'Create session'}
              </Button>
            </div>
          </form>
        </section>
      )}

      <section className='space-y-4'>
        <h2 className='text-2xl font-semibold'>Upcoming sessions</h2>
        {upcomingSessions.length === 0 ? (
          <div className='text-label-muted rounded-2xl border border-dashed border-white/10 bg-white/5 p-6 text-center'>
            No upcoming sessions yet. Check back later!
          </div>
        ) : (
          <div className='grid grid-cols-1 gap-4 lg:grid-cols-2'>
            {upcomingSessions.map(renderSession)}
          </div>
        )}
      </section>

      <section className='space-y-4'>
        <h2 className='text-2xl font-semibold'>Past sessions</h2>
        {pastSessions.length === 0 ? (
          <div className='text-label-muted rounded-2xl border border-dashed border-white/10 bg-white/5 p-6 text-center'>
            No sessions have been completed yet.
          </div>
        ) : (
          <div className='grid grid-cols-1 gap-4 lg:grid-cols-2'>
            {pastSessions.map(renderSession)}
          </div>
        )}
      </section>

      {editingSessionId && (
        <div className='fixed inset-0 flex items-center justify-center bg-black/50 p-1'>
          <div className='border-stroke w-full max-w-2xl rounded-2xl border bg-black/50 backdrop-blur-sm'>
            <div className='border-b border-white/10 px-6 py-4'>
              <h2 className='text-lg font-semibold'>Edit session</h2>
            </div>
            <form
              className='grid gap-4 p-6 sm:grid-cols-2'
              onSubmit={e => {
                e.preventDefault()
                handleUpdateSession()
              }}>
              <label className='flex flex-col gap-2 text-sm'>
                <span className='text-label-muted'>Session name</span>
                <input
                  required
                  type='text'
                  value={editForm.name}
                  onChange={e =>
                    setEditForm(prev => ({ ...prev, name: e.target.value }))
                  }
                  placeholder='Trackmania Turbo LAN'
                  className='focus:ring-accent/60 focus:border-accent rounded-lg border border-white/10 bg-white/5 px-4 py-2 outline-none transition focus:ring-2'
                />
              </label>
              <label className='flex flex-col gap-2 text-sm'>
                <span className='text-label-muted'>Date & time</span>
                <input
                  required
                  type='datetime-local'
                  value={editForm.date}
                  onChange={e =>
                    setEditForm(prev => ({ ...prev, date: e.target.value }))
                  }
                  className='focus:ring-accent/60 focus:border-accent rounded-lg border border-white/10 bg-white/5 px-4 py-2 outline-none transition focus:ring-2'
                />
              </label>
              <label className='flex flex-col gap-2 text-sm sm:col-span-2'>
                <span className='text-label-muted'>Location (optional)</span>
                <input
                  type='text'
                  value={editForm.location}
                  onChange={e =>
                    setEditForm(prev => ({ ...prev, location: e.target.value }))
                  }
                  placeholder='Oslo, Norway'
                  className='focus:ring-accent/60 focus:border-accent rounded-lg border border-white/10 bg-white/5 px-4 py-2 outline-none transition focus:ring-2'
                />
              </label>
              <label className='flex flex-col gap-2 text-sm sm:col-span-2'>
                <span className='text-label-muted'>Description (optional)</span>
                <textarea
                  value={editForm.description}
                  onChange={e =>
                    setEditForm(prev => ({
                      ...prev,
                      description: e.target.value,
                    }))
                  }
                  placeholder='Share a short agenda or helpful notes'
                  rows={3}
                  className='focus:ring-accent/60 focus:border-accent rounded-lg border border-white/10 bg-white/5 px-4 py-2 outline-none transition focus:ring-2'
                />
              </label>
              <div className='flex gap-2 sm:col-span-2'>
                <Button type='submit' disabled={updating} className='flex-1'>
                  {updating ? 'Saving…' : 'Save changes'}
                </Button>
                <Button
                  type='button'
                  variant='secondary'
                  disabled={updating}
                  onClick={() => setEditingSessionId(null)}
                  className='flex-1'>
                  Cancel
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}
